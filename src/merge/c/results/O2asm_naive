
naive_serial.o:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 <merge_sort_helper>:
#include "sort.h"

static void merge_sort_helper(uint32_t *v, size_t lo, size_t hi, uint32_t *t) {
   0:	41 57                	push   %r15
   2:	41 56                	push   %r14
   4:	41 55                	push   %r13
   6:	49 89 d5             	mov    %rdx,%r13
   9:	41 54                	push   %r12
   b:	49 89 f4             	mov    %rsi,%r12
   e:	55                   	push   %rbp
   f:	53                   	push   %rbx
  10:	48 83 ec 08          	sub    $0x8,%rsp
    if (lo < hi) {
  14:	48 39 d6             	cmp    %rdx,%rsi
  17:	73 59                	jae    72 <merge_sort_helper+0x72>
        if (hi - lo <= SMALL_THRESHOLD)
  19:	48 89 d0             	mov    %rdx,%rax
  1c:	48 89 fd             	mov    %rdi,%rbp
  1f:	48 29 f0             	sub    %rsi,%rax
  22:	48 83 f8 20          	cmp    $0x20,%rax
  26:	77 60                	ja     88 <merge_sort_helper+0x88>
            return insertion_sort(v + lo, v + hi + 1);
  28:	4c 8d 44 97 04       	lea    0x4(%rdi,%rdx,4),%r8
  2d:	48 8d 3c b7          	lea    (%rdi,%rsi,4),%rdi
void naive_serial_merge_sort(uint32_t* arr, uint32_t* arrend);
void optimized_parallel_merge_sort(uint32_t* arr, uint32_t* arrend);
void optimized_serial_merge_sort(uint32_t* arr, uint32_t* arrend);

static inline void insertion_sort(uint32_t* arr, uint32_t* arrend) {
  for (uint32_t *i = arr + 1, *j; i < arrend; i++) {
  31:	48 8d 47 04          	lea    0x4(%rdi),%rax
  35:	49 39 c0             	cmp    %rax,%r8
  38:	76 38                	jbe    72 <merge_sort_helper+0x72>
  3a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    uint32_t x = *i;
    for (j = i; j > arr; j--) {
  40:	48 39 c7             	cmp    %rax,%rdi
void optimized_parallel_merge_sort(uint32_t* arr, uint32_t* arrend);
void optimized_serial_merge_sort(uint32_t* arr, uint32_t* arrend);

static inline void insertion_sort(uint32_t* arr, uint32_t* arrend) {
  for (uint32_t *i = arr + 1, *j; i < arrend; i++) {
    uint32_t x = *i;
  43:	8b 30                	mov    (%rax),%esi
    for (j = i; j > arr; j--) {
  45:	0f 83 c5 00 00 00    	jae    110 <merge_sort_helper+0x110>
      if (x < *(j - 1)) {
  4b:	8b 48 fc             	mov    -0x4(%rax),%ecx
  4e:	48 89 c2             	mov    %rax,%rdx
  51:	39 ce                	cmp    %ecx,%esi
  53:	73 12                	jae    67 <merge_sort_helper+0x67>
        *j = *(j - 1);
  55:	89 0a                	mov    %ecx,(%rdx)
void optimized_serial_merge_sort(uint32_t* arr, uint32_t* arrend);

static inline void insertion_sort(uint32_t* arr, uint32_t* arrend) {
  for (uint32_t *i = arr + 1, *j; i < arrend; i++) {
    uint32_t x = *i;
    for (j = i; j > arr; j--) {
  57:	48 83 ea 04          	sub    $0x4,%rdx
  5b:	48 39 d7             	cmp    %rdx,%rdi
  5e:	73 07                	jae    67 <merge_sort_helper+0x67>
      if (x < *(j - 1)) {
  60:	8b 4a fc             	mov    -0x4(%rdx),%ecx
  63:	39 ce                	cmp    %ecx,%esi
  65:	72 ee                	jb     55 <merge_sort_helper+0x55>
void naive_serial_merge_sort(uint32_t* arr, uint32_t* arrend);
void optimized_parallel_merge_sort(uint32_t* arr, uint32_t* arrend);
void optimized_serial_merge_sort(uint32_t* arr, uint32_t* arrend);

static inline void insertion_sort(uint32_t* arr, uint32_t* arrend) {
  for (uint32_t *i = arr + 1, *j; i < arrend; i++) {
  67:	48 83 c0 04          	add    $0x4,%rax
        *j = *(j - 1);
        continue;
      }
      break;
    }
    *j = x;
  6b:	89 32                	mov    %esi,(%rdx)
void naive_serial_merge_sort(uint32_t* arr, uint32_t* arrend);
void optimized_parallel_merge_sort(uint32_t* arr, uint32_t* arrend);
void optimized_serial_merge_sort(uint32_t* arr, uint32_t* arrend);

static inline void insertion_sort(uint32_t* arr, uint32_t* arrend) {
  for (uint32_t *i = arr + 1, *j; i < arrend; i++) {
  6d:	49 39 c0             	cmp    %rax,%r8
  70:	77 ce                	ja     40 <merge_sort_helper+0x40>
                v[k++] = t[i++];

        while (k < j)
            v[k++] = t[i++];
    }
}
  72:	48 83 c4 08          	add    $0x8,%rsp
  76:	5b                   	pop    %rbx
  77:	5d                   	pop    %rbp
  78:	41 5c                	pop    %r12
  7a:	41 5d                	pop    %r13
  7c:	41 5e                	pop    %r14
  7e:	41 5f                	pop    %r15
  80:	c3                   	retq   
  81:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
static void merge_sort_helper(uint32_t *v, size_t lo, size_t hi, uint32_t *t) {
    if (lo < hi) {
        if (hi - lo <= SMALL_THRESHOLD)
            return insertion_sort(v + lo, v + hi + 1);

        size_t m = (lo + hi) >> 1;
  88:	4c 8d 3c 16          	lea    (%rsi,%rdx,1),%r15
  8c:	49 89 ce             	mov    %rcx,%r14
  8f:	49 d1 ef             	shr    %r15

        merge_sort_helper(v, lo, m, t);
        merge_sort_helper(v, m + 1, hi, t);
  92:	49 8d 5f 01          	lea    0x1(%r15),%rbx
        if (hi - lo <= SMALL_THRESHOLD)
            return insertion_sort(v + lo, v + hi + 1);

        size_t m = (lo + hi) >> 1;

        merge_sort_helper(v, lo, m, t);
  96:	4c 89 fa             	mov    %r15,%rdx
  99:	e8 62 ff ff ff       	callq  0 <merge_sort_helper>
        merge_sort_helper(v, m + 1, hi, t);
  9e:	4c 89 f1             	mov    %r14,%rcx
  a1:	4c 89 ea             	mov    %r13,%rdx
  a4:	48 89 de             	mov    %rbx,%rsi
  a7:	48 89 ef             	mov    %rbp,%rdi
  aa:	e8 51 ff ff ff       	callq  0 <merge_sort_helper>

        for (size_t i = lo; i <= m; i++)
  af:	4d 39 fc             	cmp    %r15,%r12
  b2:	4c 89 e0             	mov    %r12,%rax
  b5:	77 1a                	ja     d1 <merge_sort_helper+0xd1>
  b7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  be:	00 00 
            t[i] = v[i];
  c0:	8b 4c 85 00          	mov    0x0(%rbp,%rax,4),%ecx
  c4:	41 89 0c 86          	mov    %ecx,(%r14,%rax,4)
        size_t m = (lo + hi) >> 1;

        merge_sort_helper(v, lo, m, t);
        merge_sort_helper(v, m + 1, hi, t);

        for (size_t i = lo; i <= m; i++)
  c8:	48 83 c0 01          	add    $0x1,%rax
  cc:	49 39 c7             	cmp    %rax,%r15
  cf:	73 ef                	jae    c0 <merge_sort_helper+0xc0>
  d1:	49 8d 44 24 01       	lea    0x1(%r12),%rax
  d6:	eb 14                	jmp    ec <merge_sort_helper+0xec>
  d8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  df:	00 
            t[i] = v[i];

        size_t i = lo, j = m + 1, k = lo;
        while (k < j && j <= hi)
            if (v[j] < t[i])
                v[k++] = v[j++];
  e0:	48 83 c3 01          	add    $0x1,%rbx
  e4:	89 4c 85 fc          	mov    %ecx,-0x4(%rbp,%rax,4)
  e8:	48 83 c0 01          	add    $0x1,%rax
  ec:	48 8d 50 ff          	lea    -0x1(%rax),%rdx

        for (size_t i = lo; i <= m; i++)
            t[i] = v[i];

        size_t i = lo, j = m + 1, k = lo;
        while (k < j && j <= hi)
  f0:	48 39 da             	cmp    %rbx,%rdx
  f3:	73 3b                	jae    130 <merge_sort_helper+0x130>
  f5:	4c 39 eb             	cmp    %r13,%rbx
  f8:	77 36                	ja     130 <merge_sort_helper+0x130>
            if (v[j] < t[i])
  fa:	8b 4c 9d 00          	mov    0x0(%rbp,%rbx,4),%ecx
  fe:	43 8b 14 a6          	mov    (%r14,%r12,4),%edx
 102:	39 d1                	cmp    %edx,%ecx
 104:	72 da                	jb     e0 <merge_sort_helper+0xe0>
                v[k++] = v[j++];
            else
                v[k++] = t[i++];
 106:	49 83 c4 01          	add    $0x1,%r12
 10a:	89 54 85 fc          	mov    %edx,-0x4(%rbp,%rax,4)
 10e:	eb d8                	jmp    e8 <merge_sort_helper+0xe8>
    uint32_t x = *i;
    for (j = i; j > arr; j--) {
 110:	48 89 c2             	mov    %rax,%rdx
void naive_serial_merge_sort(uint32_t* arr, uint32_t* arrend);
void optimized_parallel_merge_sort(uint32_t* arr, uint32_t* arrend);
void optimized_serial_merge_sort(uint32_t* arr, uint32_t* arrend);

static inline void insertion_sort(uint32_t* arr, uint32_t* arrend) {
  for (uint32_t *i = arr + 1, *j; i < arrend; i++) {
 113:	48 83 c0 04          	add    $0x4,%rax
 117:	49 39 c0             	cmp    %rax,%r8
        *j = *(j - 1);
        continue;
      }
      break;
    }
    *j = x;
 11a:	89 32                	mov    %esi,(%rdx)
void naive_serial_merge_sort(uint32_t* arr, uint32_t* arrend);
void optimized_parallel_merge_sort(uint32_t* arr, uint32_t* arrend);
void optimized_serial_merge_sort(uint32_t* arr, uint32_t* arrend);

static inline void insertion_sort(uint32_t* arr, uint32_t* arrend) {
  for (uint32_t *i = arr + 1, *j; i < arrend; i++) {
 11c:	0f 87 1e ff ff ff    	ja     40 <merge_sort_helper+0x40>
 122:	e9 4b ff ff ff       	jmpq   72 <merge_sort_helper+0x72>
 127:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
 12e:	00 00 

        while (k < j)
 130:	48 39 da             	cmp    %rbx,%rdx
 133:	0f 83 39 ff ff ff    	jae    72 <merge_sort_helper+0x72>
 139:	4b 8d 34 a6          	lea    (%r14,%r12,4),%rsi
 13d:	48 8d 4c 95 00       	lea    0x0(%rbp,%rdx,4),%rcx
 142:	48 29 d3             	sub    %rdx,%rbx
 145:	31 c0                	xor    %eax,%eax
 147:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
 14e:	00 00 
            v[k++] = t[i++];
 150:	8b 14 86             	mov    (%rsi,%rax,4),%edx
 153:	89 14 81             	mov    %edx,(%rcx,%rax,4)
 156:	48 83 c0 01          	add    $0x1,%rax
            if (v[j] < t[i])
                v[k++] = v[j++];
            else
                v[k++] = t[i++];

        while (k < j)
 15a:	48 39 d8             	cmp    %rbx,%rax
 15d:	75 f1                	jne    150 <merge_sort_helper+0x150>
            v[k++] = t[i++];
    }
}
 15f:	48 83 c4 08          	add    $0x8,%rsp
 163:	5b                   	pop    %rbx
 164:	5d                   	pop    %rbp
 165:	41 5c                	pop    %r12
 167:	41 5d                	pop    %r13
 169:	41 5e                	pop    %r14
 16b:	41 5f                	pop    %r15
 16d:	c3                   	retq   
 16e:	66 90                	xchg   %ax,%ax

0000000000000170 <naive_serial_merge_sort>:

void naive_serial_merge_sort(uint32_t* arr, uint32_t* arrend) {
 170:	41 54                	push   %r12
 172:	55                   	push   %rbp
 173:	48 89 fd             	mov    %rdi,%rbp
 176:	53                   	push   %rbx
 177:	48 89 f3             	mov    %rsi,%rbx
  uint32_t n = arrend - arr;
 17a:	48 29 fb             	sub    %rdi,%rbx
 17d:	48 c1 fb 02          	sar    $0x2,%rbx
 181:	89 df                	mov    %ebx,%edi
  uint32_t *aux = (uint32_t*)malloc(sizeof(uint32_t) * (n)); //auxilliary memory for merge sort
 183:	48 c1 e7 02          	shl    $0x2,%rdi
 187:	e8 00 00 00 00       	callq  18c <naive_serial_merge_sort+0x1c>

  merge_sort_helper(arr, 0, n - 1, aux);
 18c:	8d 53 ff             	lea    -0x1(%rbx),%edx
 18f:	48 89 ef             	mov    %rbp,%rdi
 192:	48 89 c1             	mov    %rax,%rcx
 195:	31 f6                	xor    %esi,%esi
    }
}

void naive_serial_merge_sort(uint32_t* arr, uint32_t* arrend) {
  uint32_t n = arrend - arr;
  uint32_t *aux = (uint32_t*)malloc(sizeof(uint32_t) * (n)); //auxilliary memory for merge sort
 197:	49 89 c4             	mov    %rax,%r12

  merge_sort_helper(arr, 0, n - 1, aux);
 19a:	e8 61 fe ff ff       	callq  0 <merge_sort_helper>

  free(aux);
}
 19f:	5b                   	pop    %rbx
 1a0:	5d                   	pop    %rbp
  uint32_t n = arrend - arr;
  uint32_t *aux = (uint32_t*)malloc(sizeof(uint32_t) * (n)); //auxilliary memory for merge sort

  merge_sort_helper(arr, 0, n - 1, aux);

  free(aux);
 1a1:	4c 89 e7             	mov    %r12,%rdi
}
 1a4:	41 5c                	pop    %r12
  uint32_t n = arrend - arr;
  uint32_t *aux = (uint32_t*)malloc(sizeof(uint32_t) * (n)); //auxilliary memory for merge sort

  merge_sort_helper(arr, 0, n - 1, aux);

  free(aux);
 1a6:	e9 00 00 00 00       	jmpq   1ab <naive_serial_merge_sort+0x3b>
