
naive_serial.o:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 <merge_sort_helper>:
#include "sort.h"

static void merge_sort_helper(uint32_t *v, size_t lo, size_t hi, uint32_t *t) {
   0:	41 57                	push   %r15
   2:	41 56                	push   %r14
   4:	49 89 d6             	mov    %rdx,%r14
   7:	41 55                	push   %r13
   9:	41 54                	push   %r12
   b:	55                   	push   %rbp
   c:	48 89 f5             	mov    %rsi,%rbp
   f:	53                   	push   %rbx
  10:	48 83 ec 08          	sub    $0x8,%rsp
    if (lo < hi) {
  14:	48 39 d6             	cmp    %rdx,%rsi
  17:	73 59                	jae    72 <merge_sort_helper+0x72>
        if (hi - lo <= SMALL_THRESHOLD)
  19:	48 89 d0             	mov    %rdx,%rax
  1c:	49 89 fc             	mov    %rdi,%r12
  1f:	48 29 f0             	sub    %rsi,%rax
  22:	48 83 f8 20          	cmp    $0x20,%rax
  26:	77 60                	ja     88 <merge_sort_helper+0x88>
            return insertion_sort(v + lo, v + hi + 1);
  28:	4c 8d 44 97 04       	lea    0x4(%rdi,%rdx,4),%r8
  2d:	48 8d 3c b7          	lea    (%rdi,%rsi,4),%rdi
void naive_serial_merge_sort(uint32_t* arr, uint32_t* arrend);
void optimized_parallel_merge_sort(uint32_t* arr, uint32_t* arrend);
void optimized_serial_merge_sort(uint32_t* arr, uint32_t* arrend);

static inline void insertion_sort(uint32_t* arr, uint32_t* arrend) {
  for (uint32_t *i = arr + 1, *j; i < arrend; i++) {
  31:	48 8d 47 04          	lea    0x4(%rdi),%rax
  35:	49 39 c0             	cmp    %rax,%r8
  38:	76 38                	jbe    72 <merge_sort_helper+0x72>
  3a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    uint32_t x = *i;
    for (j = i; j > arr; j--) {
  40:	48 39 c7             	cmp    %rax,%rdi
void optimized_parallel_merge_sort(uint32_t* arr, uint32_t* arrend);
void optimized_serial_merge_sort(uint32_t* arr, uint32_t* arrend);

static inline void insertion_sort(uint32_t* arr, uint32_t* arrend) {
  for (uint32_t *i = arr + 1, *j; i < arrend; i++) {
    uint32_t x = *i;
  43:	8b 30                	mov    (%rax),%esi
    for (j = i; j > arr; j--) {
  45:	0f 83 cd 00 00 00    	jae    118 <merge_sort_helper+0x118>
      if (x < *(j - 1)) {
  4b:	8b 48 fc             	mov    -0x4(%rax),%ecx
  4e:	48 89 c2             	mov    %rax,%rdx
  51:	39 ce                	cmp    %ecx,%esi
  53:	73 12                	jae    67 <merge_sort_helper+0x67>
        *j = *(j - 1);
  55:	89 0a                	mov    %ecx,(%rdx)
void optimized_serial_merge_sort(uint32_t* arr, uint32_t* arrend);

static inline void insertion_sort(uint32_t* arr, uint32_t* arrend) {
  for (uint32_t *i = arr + 1, *j; i < arrend; i++) {
    uint32_t x = *i;
    for (j = i; j > arr; j--) {
  57:	48 83 ea 04          	sub    $0x4,%rdx
  5b:	48 39 d7             	cmp    %rdx,%rdi
  5e:	73 07                	jae    67 <merge_sort_helper+0x67>
      if (x < *(j - 1)) {
  60:	8b 4a fc             	mov    -0x4(%rdx),%ecx
  63:	39 ce                	cmp    %ecx,%esi
  65:	72 ee                	jb     55 <merge_sort_helper+0x55>
void naive_serial_merge_sort(uint32_t* arr, uint32_t* arrend);
void optimized_parallel_merge_sort(uint32_t* arr, uint32_t* arrend);
void optimized_serial_merge_sort(uint32_t* arr, uint32_t* arrend);

static inline void insertion_sort(uint32_t* arr, uint32_t* arrend) {
  for (uint32_t *i = arr + 1, *j; i < arrend; i++) {
  67:	48 83 c0 04          	add    $0x4,%rax
        *j = *(j - 1);
        continue;
      }
      break;
    }
    *j = x;
  6b:	89 32                	mov    %esi,(%rdx)
void naive_serial_merge_sort(uint32_t* arr, uint32_t* arrend);
void optimized_parallel_merge_sort(uint32_t* arr, uint32_t* arrend);
void optimized_serial_merge_sort(uint32_t* arr, uint32_t* arrend);

static inline void insertion_sort(uint32_t* arr, uint32_t* arrend) {
  for (uint32_t *i = arr + 1, *j; i < arrend; i++) {
  6d:	49 39 c0             	cmp    %rax,%r8
  70:	77 ce                	ja     40 <merge_sort_helper+0x40>
                v[k++] = t[i++];

        while (k < j)
            v[k++] = t[i++];
    }
}
  72:	48 83 c4 08          	add    $0x8,%rsp
  76:	5b                   	pop    %rbx
  77:	5d                   	pop    %rbp
  78:	41 5c                	pop    %r12
  7a:	41 5d                	pop    %r13
  7c:	41 5e                	pop    %r14
  7e:	41 5f                	pop    %r15
  80:	c3                   	retq   
  81:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
static void merge_sort_helper(uint32_t *v, size_t lo, size_t hi, uint32_t *t) {
    if (lo < hi) {
        if (hi - lo <= SMALL_THRESHOLD)
            return insertion_sort(v + lo, v + hi + 1);

        size_t m = (lo + hi) >> 1;
  88:	4c 8d 3c 16          	lea    (%rsi,%rdx,1),%r15
  8c:	49 89 cd             	mov    %rcx,%r13
  8f:	49 d1 ef             	shr    %r15

        merge_sort_helper(v, lo, m, t);
        merge_sort_helper(v, m + 1, hi, t);
  92:	49 8d 5f 01          	lea    0x1(%r15),%rbx
        if (hi - lo <= SMALL_THRESHOLD)
            return insertion_sort(v + lo, v + hi + 1);

        size_t m = (lo + hi) >> 1;

        merge_sort_helper(v, lo, m, t);
  96:	4c 89 fa             	mov    %r15,%rdx
  99:	e8 62 ff ff ff       	callq  0 <merge_sort_helper>
        merge_sort_helper(v, m + 1, hi, t);
  9e:	4c 89 e9             	mov    %r13,%rcx
  a1:	4c 89 f2             	mov    %r14,%rdx
  a4:	48 89 de             	mov    %rbx,%rsi
  a7:	4c 89 e7             	mov    %r12,%rdi
  aa:	e8 51 ff ff ff       	callq  0 <merge_sort_helper>

        for (size_t i = lo; i <= m; i++)
  af:	4c 39 fd             	cmp    %r15,%rbp
  b2:	48 89 e8             	mov    %rbp,%rax
  b5:	77 1b                	ja     d2 <merge_sort_helper+0xd2>
  b7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  be:	00 00 
            t[i] = v[i];
  c0:	41 8b 0c 84          	mov    (%r12,%rax,4),%ecx
  c4:	41 89 4c 85 00       	mov    %ecx,0x0(%r13,%rax,4)
        size_t m = (lo + hi) >> 1;

        merge_sort_helper(v, lo, m, t);
        merge_sort_helper(v, m + 1, hi, t);

        for (size_t i = lo; i <= m; i++)
  c9:	48 83 c0 01          	add    $0x1,%rax
  cd:	49 39 c7             	cmp    %rax,%r15
  d0:	73 ee                	jae    c0 <merge_sort_helper+0xc0>
  d2:	48 8d 45 01          	lea    0x1(%rbp),%rax
  d6:	eb 15                	jmp    ed <merge_sort_helper+0xed>
  d8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  df:	00 
            t[i] = v[i];

        size_t i = lo, j = m + 1, k = lo;
        while (k < j && j <= hi)
            if (v[j] < t[i])
                v[k++] = v[j++];
  e0:	48 83 c3 01          	add    $0x1,%rbx
  e4:	41 89 4c 84 fc       	mov    %ecx,-0x4(%r12,%rax,4)
  e9:	48 83 c0 01          	add    $0x1,%rax
  ed:	48 8d 50 ff          	lea    -0x1(%rax),%rdx

        for (size_t i = lo; i <= m; i++)
            t[i] = v[i];

        size_t i = lo, j = m + 1, k = lo;
        while (k < j && j <= hi)
  f1:	48 39 da             	cmp    %rbx,%rdx
  f4:	73 3a                	jae    130 <merge_sort_helper+0x130>
  f6:	4c 39 f3             	cmp    %r14,%rbx
  f9:	77 35                	ja     130 <merge_sort_helper+0x130>
            if (v[j] < t[i])
  fb:	41 8b 0c 9c          	mov    (%r12,%rbx,4),%ecx
  ff:	41 8b 54 ad 00       	mov    0x0(%r13,%rbp,4),%edx
 104:	39 d1                	cmp    %edx,%ecx
 106:	72 d8                	jb     e0 <merge_sort_helper+0xe0>
                v[k++] = v[j++];
            else
                v[k++] = t[i++];
 108:	48 83 c5 01          	add    $0x1,%rbp
 10c:	41 89 54 84 fc       	mov    %edx,-0x4(%r12,%rax,4)
 111:	eb d6                	jmp    e9 <merge_sort_helper+0xe9>
 113:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    uint32_t x = *i;
    for (j = i; j > arr; j--) {
 118:	48 89 c2             	mov    %rax,%rdx
void naive_serial_merge_sort(uint32_t* arr, uint32_t* arrend);
void optimized_parallel_merge_sort(uint32_t* arr, uint32_t* arrend);
void optimized_serial_merge_sort(uint32_t* arr, uint32_t* arrend);

static inline void insertion_sort(uint32_t* arr, uint32_t* arrend) {
  for (uint32_t *i = arr + 1, *j; i < arrend; i++) {
 11b:	48 83 c0 04          	add    $0x4,%rax
 11f:	49 39 c0             	cmp    %rax,%r8
        *j = *(j - 1);
        continue;
      }
      break;
    }
    *j = x;
 122:	89 32                	mov    %esi,(%rdx)
void naive_serial_merge_sort(uint32_t* arr, uint32_t* arrend);
void optimized_parallel_merge_sort(uint32_t* arr, uint32_t* arrend);
void optimized_serial_merge_sort(uint32_t* arr, uint32_t* arrend);

static inline void insertion_sort(uint32_t* arr, uint32_t* arrend) {
  for (uint32_t *i = arr + 1, *j; i < arrend; i++) {
 124:	0f 87 16 ff ff ff    	ja     40 <merge_sort_helper+0x40>
 12a:	e9 43 ff ff ff       	jmpq   72 <merge_sort_helper+0x72>
 12f:	90                   	nop

        while (k < j)
 130:	48 39 da             	cmp    %rbx,%rdx
 133:	0f 83 39 ff ff ff    	jae    72 <merge_sort_helper+0x72>
 139:	49 8d 74 ad 00       	lea    0x0(%r13,%rbp,4),%rsi
 13e:	49 8d 0c 94          	lea    (%r12,%rdx,4),%rcx
 142:	48 89 df             	mov    %rbx,%rdi
 145:	48 29 d7             	sub    %rdx,%rdi
 148:	48 8d 46 10          	lea    0x10(%rsi),%rax
 14c:	48 39 c1             	cmp    %rax,%rcx
 14f:	48 8d 41 10          	lea    0x10(%rcx),%rax
 153:	41 0f 93 c0          	setae  %r8b
 157:	48 39 c6             	cmp    %rax,%rsi
 15a:	0f 93 c0             	setae  %al
 15d:	41 08 c0             	or     %al,%r8b
 160:	0f 84 9a 00 00 00    	je     200 <merge_sort_helper+0x200>
 166:	48 83 ff 0b          	cmp    $0xb,%rdi
 16a:	0f 86 90 00 00 00    	jbe    200 <merge_sort_helper+0x200>
 170:	49 89 fa             	mov    %rdi,%r10
 173:	49 c1 ea 02          	shr    $0x2,%r10
 177:	4e 8d 0c 95 00 00 00 	lea    0x0(,%r10,4),%r9
 17e:	00 
 17f:	4d 85 c9             	test   %r9,%r9
 182:	74 2b                	je     1af <merge_sort_helper+0x1af>
 184:	31 c0                	xor    %eax,%eax
 186:	45 31 c0             	xor    %r8d,%r8d
            v[k++] = t[i++];
 189:	f3 0f 6f 04 06       	movdqu (%rsi,%rax,1),%xmm0
 18e:	49 83 c0 01          	add    $0x1,%r8
 192:	f3 0f 7f 04 01       	movdqu %xmm0,(%rcx,%rax,1)
 197:	48 83 c0 10          	add    $0x10,%rax
 19b:	4d 39 c2             	cmp    %r8,%r10
 19e:	77 e9                	ja     189 <merge_sort_helper+0x189>
 1a0:	4c 01 cd             	add    %r9,%rbp
 1a3:	4c 01 ca             	add    %r9,%rdx
 1a6:	4c 39 cf             	cmp    %r9,%rdi
 1a9:	0f 84 c3 fe ff ff    	je     72 <merge_sort_helper+0x72>
 1af:	48 8d 42 01          	lea    0x1(%rdx),%rax
 1b3:	41 8b 74 ad 00       	mov    0x0(%r13,%rbp,4),%esi
 1b8:	48 8d 4d 01          	lea    0x1(%rbp),%rcx
            if (v[j] < t[i])
                v[k++] = v[j++];
            else
                v[k++] = t[i++];

        while (k < j)
 1bc:	48 39 c3             	cmp    %rax,%rbx
            v[k++] = t[i++];
 1bf:	41 89 34 94          	mov    %esi,(%r12,%rdx,4)
            if (v[j] < t[i])
                v[k++] = v[j++];
            else
                v[k++] = t[i++];

        while (k < j)
 1c3:	0f 86 a9 fe ff ff    	jbe    72 <merge_sort_helper+0x72>
            v[k++] = t[i++];
 1c9:	41 8b 4c 8d 00       	mov    0x0(%r13,%rcx,4),%ecx
 1ce:	48 83 c2 02          	add    $0x2,%rdx
 1d2:	48 83 c5 02          	add    $0x2,%rbp
            if (v[j] < t[i])
                v[k++] = v[j++];
            else
                v[k++] = t[i++];

        while (k < j)
 1d6:	48 39 da             	cmp    %rbx,%rdx
            v[k++] = t[i++];
 1d9:	41 89 0c 84          	mov    %ecx,(%r12,%rax,4)
            if (v[j] < t[i])
                v[k++] = v[j++];
            else
                v[k++] = t[i++];

        while (k < j)
 1dd:	0f 83 8f fe ff ff    	jae    72 <merge_sort_helper+0x72>
            v[k++] = t[i++];
 1e3:	41 8b 44 ad 00       	mov    0x0(%r13,%rbp,4),%eax
 1e8:	41 89 04 94          	mov    %eax,(%r12,%rdx,4)
    }
}
 1ec:	48 83 c4 08          	add    $0x8,%rsp
 1f0:	5b                   	pop    %rbx
 1f1:	5d                   	pop    %rbp
 1f2:	41 5c                	pop    %r12
 1f4:	41 5d                	pop    %r13
 1f6:	41 5e                	pop    %r14
 1f8:	41 5f                	pop    %r15
 1fa:	c3                   	retq   
 1fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
            if (v[j] < t[i])
                v[k++] = v[j++];
            else
                v[k++] = t[i++];

        while (k < j)
 200:	31 c0                	xor    %eax,%eax
 202:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
            v[k++] = t[i++];
 208:	8b 14 86             	mov    (%rsi,%rax,4),%edx
 20b:	89 14 81             	mov    %edx,(%rcx,%rax,4)
 20e:	48 83 c0 01          	add    $0x1,%rax
            if (v[j] < t[i])
                v[k++] = v[j++];
            else
                v[k++] = t[i++];

        while (k < j)
 212:	48 39 c7             	cmp    %rax,%rdi
 215:	75 f1                	jne    208 <merge_sort_helper+0x208>
 217:	e9 56 fe ff ff       	jmpq   72 <merge_sort_helper+0x72>
 21c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000000220 <naive_serial_merge_sort>:
            v[k++] = t[i++];
    }
}

void naive_serial_merge_sort(uint32_t* arr, uint32_t* arrend) {
 220:	41 54                	push   %r12
 222:	55                   	push   %rbp
 223:	48 89 fd             	mov    %rdi,%rbp
 226:	53                   	push   %rbx
 227:	48 89 f3             	mov    %rsi,%rbx
  uint32_t n = arrend - arr;
 22a:	48 29 fb             	sub    %rdi,%rbx
 22d:	48 c1 fb 02          	sar    $0x2,%rbx
 231:	89 df                	mov    %ebx,%edi
  uint32_t *aux = (uint32_t*)malloc(sizeof(uint32_t) * (n)); //auxilliary memory for merge sort
 233:	48 c1 e7 02          	shl    $0x2,%rdi
 237:	e8 00 00 00 00       	callq  23c <naive_serial_merge_sort+0x1c>

  merge_sort_helper(arr, 0, n - 1, aux);
 23c:	8d 53 ff             	lea    -0x1(%rbx),%edx
 23f:	48 89 ef             	mov    %rbp,%rdi
 242:	48 89 c1             	mov    %rax,%rcx
 245:	31 f6                	xor    %esi,%esi
    }
}

void naive_serial_merge_sort(uint32_t* arr, uint32_t* arrend) {
  uint32_t n = arrend - arr;
  uint32_t *aux = (uint32_t*)malloc(sizeof(uint32_t) * (n)); //auxilliary memory for merge sort
 247:	49 89 c4             	mov    %rax,%r12

  merge_sort_helper(arr, 0, n - 1, aux);
 24a:	e8 b1 fd ff ff       	callq  0 <merge_sort_helper>

  free(aux);
}
 24f:	5b                   	pop    %rbx
 250:	5d                   	pop    %rbp
  uint32_t n = arrend - arr;
  uint32_t *aux = (uint32_t*)malloc(sizeof(uint32_t) * (n)); //auxilliary memory for merge sort

  merge_sort_helper(arr, 0, n - 1, aux);

  free(aux);
 251:	4c 89 e7             	mov    %r12,%rdi
}
 254:	41 5c                	pop    %r12
  uint32_t n = arrend - arr;
  uint32_t *aux = (uint32_t*)malloc(sizeof(uint32_t) * (n)); //auxilliary memory for merge sort

  merge_sort_helper(arr, 0, n - 1, aux);

  free(aux);
 256:	e9 00 00 00 00       	jmpq   25b <naive_serial_merge_sort+0x3b>
